Problem 36: Permutations

Given an array nums of distinct integers, return all the possible 
permutations
. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

solution....
class Solution {
public:

void perms(vector<int>& nums,int i,vector<vector<int>>& ans){
    if(i==nums.size()){
        ans.push_back({nums});
    }

    for(int j=i;j<nums.size();j++){
        swap(nums[i],nums[j]);
        perms(nums,i+1,ans);
        swap(nums[i],nums[j]);
    }
}
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> ans;
        perms(nums,0,ans);
        return ans;
       
    }
 T(n)=(n!*n);
S(n)=O(n);
