Problem21: Permutation in String

Given two strings s1 and s2, return true if s2 contains a 
permutation
 of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.

 

Example 1:

Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input: s1 = "ab", s2 = "eidboaoo"
Output: false

solution:

class Solution {
public:

bool isfreqsame(int freq1[],int freq2[]){
    for(int i=0;i<26;i++){
        if(freq1[i]!=freq2[i]){
            return false;
        }
    }
    return true;
}
    bool checkInclusion(string s1, string s2) {
        int freq[26]={0};

        for(int i=0;i<s1.length();i++){
            int idx=s1[i]-'a';
            freq[idx]++;
        }
        int windsize=s1.length();

        for(int i=0;i<s2.length();i++){
            int windidx=0,idx=i;
            int windfreq[26]={0};

            while(windidx<windsize && idx<s2.length()){
                windfreq[s2[idx]-'a']++;
                windidx++;
                idx++;
            }
            if(isfreqsame(freq,windfreq)){
                return true;
            }
        }
        return false;
    }
};
