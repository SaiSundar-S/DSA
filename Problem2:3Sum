Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.








class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& a) {
        int n = a.size();
        vector<vector<int>> answer;
        int target = 0;
        sort(a.begin(), a.end());
        
        for (int i = 0; i < n; i++) {
            // Skip duplicate elements after the first iteration
            if (i > 0 && a[i] == a[i - 1]) continue;
            
            int j = i + 1, k = n - 1;
            int tar = target - a[i];
            while (j < k) {
                if (a[j] + a[k] == tar) {
                    answer.push_back({a[i], a[j], a[k]});
                    j++;
                    k--;
                    // Skip duplicates in j and k
                    while (j < k && a[j] == a[j - 1]) j++;
                    while (j < k && a[k] == a[k + 1]) k--;
                } else if (a[j] + a[k] < tar) {
                    j++;
                } else {
                    k--;
                }
            }
        }
        return answer;
    } 
};




Time complexity: O(n^2)
